/**
* Swagger Petstore
* This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.7
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GeneralError.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GeneralError::GeneralError()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    
}

void GeneralError::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GeneralError::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GeneralError::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GeneralError" : pathPrefix;

            
    return success;
}

bool GeneralError::operator==(const GeneralError& rhs) const
{
    return
    
    
    
    ((!codeIsSet() && !rhs.codeIsSet()) || (codeIsSet() && rhs.codeIsSet() && getCode() == rhs.getCode())) &&
    
    
    ((!messageIsSet() && !rhs.messageIsSet()) || (messageIsSet() && rhs.messageIsSet() && getMessage() == rhs.getMessage()))
    
    ;
}

bool GeneralError::operator!=(const GeneralError& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GeneralError& o)
{
    j = nlohmann::json::object();
    if(o.codeIsSet())
        j["code"] = o.m_Code;
    if(o.messageIsSet())
        j["message"] = o.m_Message;
    
}

void from_json(const nlohmann::json& j, GeneralError& o)
{
    if(j.find("code") != j.end())
    {
        j.at("code").get_to(o.m_Code);
        o.m_CodeIsSet = true;
    } 
    if(j.find("message") != j.end())
    {
        j.at("message").get_to(o.m_Message);
        o.m_MessageIsSet = true;
    } 
    
}

int32_t GeneralError::getCode() const
{
    return m_Code;
}
void GeneralError::setCode(int32_t const value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool GeneralError::codeIsSet() const
{
    return m_CodeIsSet;
}
void GeneralError::unsetCode()
{
    m_CodeIsSet = false;
}
std::string GeneralError::getMessage() const
{
    return m_Message;
}
void GeneralError::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool GeneralError::messageIsSet() const
{
    return m_MessageIsSet;
}
void GeneralError::unsetMessage()
{
    m_MessageIsSet = false;
}


} // namespace org::openapitools::server::model

